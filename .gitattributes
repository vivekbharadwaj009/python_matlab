# Auto detect text files and perform LF normalization
* text=auto
7->
from sympy import* 
x, y, z = symbols('x, y, z') 
w2= integrate (( x*y*z ) ,(z ,0 , 3-x-y ) ,(y ,0 , 3-x ) ,(x ,0 , 3 ) )
 print (‘Answer=’, w2 )

8->
from sympy import*
 x = Symbol ('x') 
 y = Symbol ('y') 
 z = Symbol ('z') 
 a = Symbol ('a') 
 b = Symbol ('b') 
 c = Symbol ('c') 
 w2 = integrate (1 ,(z,0,c*(1-x/a-y/b)) ,(y,0,b*(1-x/a)) ,(x,0,a)) 
 print ('Answer=',w2)

5->
def f(x):
return 1/(1 + x**2)
# Implementing trapezoidal method
def trapezoidal(x0,xn,n):
# calculating step size
h = (xn - x0) / n
# Finding sum
integration = f(x0) + f(xn)
for i in range(1,n):
k = x0 + i*h
integration = integration + 2 * f(k)
# Finding final integration value
integration = integration * h/2
return integration
# Input section
lower_limit = float(input("Enter lower limit of integration: "))
upper_limit = float(input("Enter upper limit of integration: "))
sub_interval = int(input("Enter number of sub intervals: "))
# Call trapezoidal() method and get result
result = trapezoidal(lower_limit, upper_limit, sub_interval)
print("Integration result by Trapezoidal method is: %0.6f" % (result) )

6->
# Define function to integrate
def f(x):
return 1/(1 + x**2)
# Implementing Simpson's 1/3
def simpson13(x0,xn,n):
# calculating step size
h = (xn - x0) / n
# Finding sum
integration = f(x0) + f(xn)
for i in range(1,n):
k = x0 + i*h
if i%2 == 0:
integration = integration + 2 * f(k)
else:
integration = integration + 4 * f(k)
# Finding final integration value
integration = integration * h/3
return integration
# Input section
lower_limit = float(input("Enter lower limit of integration: "))
upper_limit = float(input("Enter upper limit of integration: "))
sub_interval = int(input("Enter number of sub intervals: "))
# Call simpson13() method and get result
result = simpson13(lower_limit, upper_limit, sub_interval)
print("Integration result by Simpson's 1/3 method is: %0.6f" % (result) )

3->
import numpy as np
from sympy import*
import math
# Number of values given
n = 4;
x = [ 45, 50, 55, 60 ];
# y[][] is used for difference table with y[i][0] used for input
y = [[0 for i in range(n)]
for j in range(n)];
y[0][0] = 0.7071;
y[1][0] = 0.7660;
y[2][0] = 0.8192;
y[3][0] = 0.8660;
print('The forward difference table is:')
# Calculating the forward difference table
for i in range(1, n):
for j in range(n - i):
y[j][i] = y[j + 1][i - 1] - y[j][i - 1];
# Displaying the forward difference table
for i in range(n):
print(x[i], end = "\t");
for j in range(n - i):
print(y[i][j], end = "\t");
print("");
# Value to interpolate at x=?
value = 52;
# initializing r=(x-x0)/h and sum
sum = y[0][0];
r = (value - x[0]) / (x[1] - x[0]);
print('r=',r)
for i in range(1,n):
sum = sum + (r_cal(r, i) * y[0][i]) / fact(i);
print("\nValue at", value,"is", round(sum, 6));
# function for calculating r-product mentioned in the formula
def r_cal(r, n):
temp = r;
for i in range(1, n):
temp = temp * (r - i);
return temp;
# function for calculating factorial of given number n
def fact(n):
f = 1;
for i in range(2, n + 1):
f=f * i;
return f;

4->
import numpy as np
def r_cal(r, n):
temp = r;
for i in range(1, n):
temp = temp * (r + i);
return temp;
#Entering X and Y values
x = np.array([0, 2, 4, 6, 8, 10],float)
y = np.array([0.15, 1.56, 2.15, 2.60, 3, 3.30],float)
print('Difference Table:')
n = len(x)
p = np.zeros([n, n+1])
for i in range(n):
p[i, 0] = x[i]
p[i, 1] = y[i]
for i in range(2, n+1):
for j in range(n+1-i):
p[j][i] = p[j + 1][i - 1] - p[j][i - 1]
for i in range(n):
for j in range(n+1-i):
print(round(p[i][j], 4), end = "\t")
print("")
#Enter the point at which you want to calculate
z = float(input('Enter the point at which you want to calculate:'))
sum = p[-1][1]
r = (z - x[-1]) / (x[1] - x[0])
for i in range(1,n):
sum = sum + (r_cal(r, i) * p[n-(i+1)][i+1]) / np.math.factorial(i)
print("\n Value at", z, "is", round(sum, 6))

1->
import numpy as np
from sympy import*
import math
# Defining Function
def f(x):
return x**3-5*x-9
# Implementing False Position Method
def falsePosition(x0,x1,e):
step = 1
print('\n\n*** FALSE POSITION METHOD IMPLEMENTATION ***')
condition = True
while condition:
x2 = x0 - (x1-x0) * f(x0)/( f(x1) - f(x0) )
print('Iteration-%d, x2 = %0.6f and f(x2) = %0.6f' % (step, x2, f(x2)))
if f(x0) * f(x2) < 0:
x1 = x2
else:
x0 = x2
step = step + 1
condition = abs(f(x2)) > e
print('\n Required root is: %0.8f' % x2)
# Input Section
x0 = input('First Guess: ')
x1 = input('Second Guess: ')
e = input('Tolerable Error: ')
# Converting input to float
x0 = float(x0)
x1 = float(x1)
e = float(e)
# Checking Correctness of initial guess values and false positioning
if f(x0) * f(x1) > 0.0:
print('Given guess values do not bracket the root.')
print('Try Again with different guess values.')
else:
falsePosition(x0,x1,e)

2->
import numpy as np
from sympy import*
import math
# Defining Function
def f(x):
return x**3 - 5*x - 9
# Defining derivative of function
def g(x):
return 3*x**2 - 5
# Implementing Newton Raphson Method
def newtonRaphson(x0,e,N):
print('\n\n*** NEWTON RAPHSON METHOD IMPLEMENTATION ***')
step = 1
flag = 1
condition = True
while condition:
if g(x0) == 0.0:
print('Divide by zero error!')
break
x1 = x0 - f(x0)/g(x0)
print('Iteration-%d, x1 = %0.6f and f(x1) = %0.6f' % (step, x1, f(x1)))
x0 = x1
step = step + 1
if step > N:
flag = 0
break
condition = abs(f(x1)) > e
if flag==1:
print('\n Required root is: %0.8f' % x1)
else:
print('\n Not Convergent.')
# Input Section
x0 = input('Enter Guess: ')
e = input('Tolerable Error: ')
N = input('Maximum Step: ')
# Converting x0 and e to float
x0 = float(x0)
e = float(e)
# Converting N to integer
N = int(N)
# Starting Newton Raphson Method
newtonRaphson(x0,e,N)
